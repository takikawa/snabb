module(..., package.seeall)

local ffi = require("ffi")
local bit = require("bit")
local C = ffi.C

local dasm = require("dasm")

local regalloc = require("pf.regalloc")

|.arch x64
|.actionlist actions

-- Table keeping machine code alive to the GC.
local anchor = {}

local debug = true

-- translate a variable occurrence into the appropriate
-- register, perhaps consulting the register allocation
function translate_variable(var)
   if var == "P" then
      return "edi"
   elseif var == "len" then
      return "esi"
   end
end

-- extract a number from an SSA IR label
function label_num(label)
   return tonumber(string.match(label, "L(%d+)"))
end

-- compile a boolean expression that appears in a conditional or return
function compile_relop(Dst, expr, alloc)
   local lhs_reg = assert(alloc[expr[2]])
   local rhs = expr[3]

   if type(rhs) == "number" then
      | cmp Rq(lhs_reg), rhs
   else
      local rhs_reg = alloc[rhs]
      | cmp Rq(lhs_reg), Rq(rhs_reg)
   end
end

-- compile an arithmetic expression
function compile_expr(Dst, name, expr, alloc)
   local op         = expr[1]
   local target_reg = assert(alloc[name])

   if op == "[]" then
      local offset = expr[2]
      local bytes  = expr[3]

      if bytes == 1 then
         | movzx Rq(target_reg), byte [rdi + offset]
      elseif bytes == 2 then
         | movzx Rq(target_reg), word [rdi + offset]
      else
         | mov   Rd(target_reg), dword [rdi + offset]
      end

   elseif op == "+" then
      | add Rq(target_reg), Rq(alloc[expr[3]])

   elseif op == "*" then
      | mul Rq(alloc[expr[3]])

   elseif op == "+const" then
      | add Rq(target_reg), expr[3]

   elseif op == "*const" then
      local const = expr[3]
      local r = target_reg

      if const == 2 then
         | lea Rq(r), [Rq(r)*2]
      elseif const == 4 then
         | lea Rq(r), [Rq(r)*4]
      elseif const == 8 then
         | lea Rq(r), [Rq(r)*8]
      elseif const == 3 then
         | lea Rq(r), [Rq(r)+Rq(r)*2]
      elseif const == 5 then
         | lea Rq(r), [Rq(r)+Rq(r)*4]
      elseif const == 7 then
         | lea Rq(r), [Rq(r)+Rq(r)*8]
      else
         | imul Rq(target_reg), expr[3]
      end

   elseif op == "+3" then
      local expr2, expr3, expr4 = expr[2], expr[3], expr[4]

      -- expr2 is always a register
      -- due to constant folding, only at most one of expr3
      -- or expr4 can be a constant
      if type(expr3) == "number" then
         local e4_reg = alloc[expr4]
         | lea Rq(target_reg), [Rq(e4_reg)+expr3]
      elseif type(expr4) == "number" then
         local e3_reg = alloc[expr3]
         | lea Rq(target_reg), [Rq(e3_reg)+expr4]
      else
         local e3_reg = alloc[expr3]
         local e4_reg = alloc[expr4]
         | lea Rq(target_reg), [Rq(e4_reg)+Rq(e3_reg)]
      end

   else
      error(string.format("NYI expr %s", op))
   end
end

local function compile_cmp(Dst, var, const, alloc)
   if var == "P" then
      | cmp edi, const
      return
   elseif var == "len" then
      | cmp esi, const
      return
   end

   local reg = alloc[var]

   if type(reg) == "table" then
     -- spill case
     local offset = (reg.spill - 1) * 32
     | cmp dword [rsp + offset], const
   else
     | cmp Rq(reg), const
   end
end

-- generate a move from rax to the appropriate register
local function compile_var_move(Dst, var, alloc)
   local reg = alloc[var]

   if type(reg) == "table" then
      -- spill case
      local offset = (reg.spill - 1) * 32
      | mov [rsp + offset], rax
   else
      | mov Rq(reg), rax
   end
end

local function compile_jmp(Dst, expr, if_next)
   local op = expr[1];

   -- TODO: simplify this, maybe by using a runtime
   --       label for the return case
   if if_next then
     if op == "=" then
        | jne =>(if_next)
     elseif op == ">=" then
        | jl  =>(if_next)
     elseif op == "<=" then
        | jg  =>(if_next)
     elseif op == ">" then
        | jle =>(if_next)
     elseif op == "<" then
        | jge =>(if_next)
     end
   else
     if op == "=" then
        | je >1
     elseif op == ">=" then
        | jge  >1
     elseif op == "<=" then
        | jle  >1
     elseif op == ">" then
        | jg >1
     elseif op == "<" then
        | jl >1
     end
   end

   if not if_next then
      | jmp >2
   end
end

local function compile(ssa, alloc, dump)
   local Dst = dasm.new(actions)

   -- number of =>(...) style labels, we need a maximum
   -- of one per SSA block label plus a few special ones
   local order = ssa.order
   local maxpc = #order
   local label_map = {}

   Dst:growpc(maxpc)

   -- map ir labels to pc labels
   -- pc labels start at 0, so decrement
   for idx, label in ipairs(order) do
      label_map[label] = idx - 1
   end

   -- allocate space for all spilled vars
   local spilled_space = alloc.num_spilled * 32
   if spilled_space > 0 then
      | sub rsp, spilled_space
   end

   local blocks = ssa.blocks
   for _, label in ipairs(order) do
      local block = blocks[label]

      cur_label = label_map[label]
      |=>(cur_label):

      local control = block.control
      local bindings = block.bindings
      -- lookup register allocation for this block
      local local_alloc = alloc[label]
      local op = control[1]

      for _, binding in ipairs(bindings) do
         compile_expr(Dst, binding.name, binding.value, local_alloc)
      end

      if op == "if" then
         -- TODO: abstract some of this label handling
         local next_label = label_map[control[4]]

         compile_relop(Dst, control[2], local_alloc)
         compile_jmp(Dst, control[2], next_label)
      elseif op == "return" then
         local expr = control[2]

         if #expr == 1 and expr[1] == "true" then
            | jmp >1
         elseif #expr == 1 and expr[1] == "false" then
            | jmp >2
         else
            compile_relop(Dst, expr, local_alloc)
            compile_jmp(Dst, expr)
         end
      else
	 error(string.format("NYI op %s", op))
      end
   end

   -- return true, false
   -- TODO: do this more cleverly
   |1:
   | mov rax, 0x1
   | jmp >3
   |2:
   | mov rax, 0x0
   |3:

   -- fix stack
   if spilled_space > 0 then
      | add rsp, spilled_space
   end
   | ret

   local mcode, size = Dst:build()
   table.insert(anchor, mcode)

   if dump or debug then
      print("mcode dump:")
      dasm.dump(mcode, size)
   end

   return ffi.cast(ffi.typeof("bool(*)(unsigned char*, uint16_t)"),
                   mcode)
end

function load(ssa, dump)
   local alloc = regalloc.allocate_registers(ssa)
   local fun = compile(ssa, alloc, dump)

   return fun
end

function selftest()
   local is = require("pf.instruct")
   local ra = require("pf.regalloc")

   -- `ip`
   local example_1 =
      { start = "L1",
	order = { "L1", "L4", "L5" },
	blocks =
	   { L1 = { label = "L1",
		    bindings = {},
		    control = { "if", { ">=", "len", 14 }, "L4", "L5" } },
	     L4 = { label = "L4",
		    bindings = {},
		    control = { "return", { "=", { "[]", 12, 2 }, 8 } } },
	     L5 = { label = "L5",
		    bindings = {},
		    control = { "return", { "false" } } } } }

   -- `arp`
   local example_2 =
      { start = "L1",
	order = { "L1", "L4", "L5" },
	blocks =
	   { L1 = { label = "L1",
		    bindings = {},
		    control = { "if", { ">=", "len", 14 }, "L4", "L5" } },
	     L4 = { label = "L4",
		    bindings = {},
		    control = { "return", { "=", { "[]", 12, 2 }, 1544 } } },
	     L5 = { label = "L5",
		    bindings = {},
		    control = { "return", { "false" } } } } }

   -- `tcp`
   local example_3 =
      { start = "L1",
	order = { "L1", "L4", "L6", "L7", "L8", "L10", "L12", "L13",
		  "L14", "L16", "L17", "L15", "L11", "L9", "L5" },
	blocks =
	   { L1 = { label = "L1",
	            bindings = {},
	            control = { "if", { ">=", "len", 34 }, "L4", "L5" } },
	     L4 = { label = "L4",
	            bindings = { { name = "v1", value = { "[]", 12, 2 } } },
	            control = { "if", { "=", "v1", 8 }, "L6", "L7" } },
	     L6 = { label = "L6",
	            bindings = {},
	            control = { "return", { "=", { "[]", 23, 1 }, 6 } } },
	     L7 = { label = "L7",
	            bindings = {},
	            control = { "if", { ">=", "len", 54 }, "L8", "L9" } },
	     L8 = { label = "L8",
	            bindings = {},
	            control = { "if", { "=", "v1", 56710 }, "L10", "L11" } },
	     L10 = { label = "L10",
	             bindings = { { name = "v2", value = { "[]", 20, 1 } } },
	             control = { "if", { "=", "v2", 6 }, "L12", "L13" } },
	     L12 = { label = "L12",
	             bindings = {},
	             control = { "return", { "true" } } },
	     L13 = { label = "L13",
	             bindings = {},
	             control = { "if", { ">=", "len", 55 }, "L14", "L15" } },
	     L14 = { label = "L14",
	             bindings = {},
	             control = { "if", { "=", "v2", 44 }, "L16", "L17" } },
	     L16 = { label = "L16",
	             bindings = {},
	             control = { "return", { "=", { "[]", 54, 1 }, 6 } } },
	     L17 = { label = "L17",
	             bindings = {},
	             control = { "return", { "false" } } },
	     L15 = { label = "L15",
	             bindings = {},
	             control = { "return", { "false" } } },
	     L11 = { label = "L11",
	             bindings = {},
	             control = { "return", { "false" } } },
	     L9 = { label = "L9",
	            bindings = {},
	            control = { "return", { "false" } } },
	     L5 = { label = "L5",
	            bindings = {},
	            control = { "return", { "false" } } } } }

   local function test(ssa, pkt, regalloc)
      -- Compile and then call native function on the given packet
      is.lower(ssa)
      local f = compile(ssa, regalloc)
      return f(pkt.packet, pkt.len)
   end

   -- set up the metatables properly on sub-tables of example
   -- register allocation outputs used in tests
   local function fix_ra(ssa, ra)
      for _, val in pairs(ra) do
         if type(val) == "table" and not val.spill then
            setmetatable(val, {__index = ra})
         end
      end

      for label, block in pairs(ssa.blocks) do
         if not ra[label] then
            local tbl = {}
            ra[label] = tbl
            setmetatable(tbl, {__index = ra})
         end
      end
   end

   local savefile = require("pf.savefile")
   arp_pkts = savefile.load_packets("../tests/data/arp.pcap")
   v4_pkts = savefile.load_packets("../tests/data/v4.pcap")
   v6_pkts = savefile.load_packets("../tests/data/v6.pcap")

   local rax, rsi, rdi = 0, 6, 7
   local alloc_1 = { num_spilled = 0,
                     len = rsi,
                     P = rdi,
                     L4 = { r1 = rax } }
   fix_ra(example_1, alloc_1)

   -- not an arp packet
   assert(not test(example_1, arp_pkts[1], alloc_1))
   assert(not test(example_1, arp_pkts[2], alloc_1))
   -- TODO: this is currently broken
   --assert(not test(example_1, arp_pkts[2], ra.allocate_registers(example_1)))
   -- yay arp
   assert(test(example_2, arp_pkts[1], alloc_1))
   assert(test(example_2, arp_pkts[2], alloc_1))

   local alloc_3 = { num_spilled = 0,
                     len = rsi,
                     P = rdi,
                     L6 = { r1 = rax },
                     L16 = { r1 = rax } }
   fix_ra(example_3, alloc_3)

   local function test_3()
      assert(not test(example_3,
                      arp_pkts[1],
                      alloc_3))
      assert(test(example_3,
                  -- this one is a TCP packet
                  v4_pkts[1],
                  alloc_3))
      assert(test(example_3,
                  -- this one is also a TCP packet
                  v6_pkts[16],
                  alloc_3))
   end

   -- TODO: spills are currently broken
   --test_3({ v1 = { spill = 1 },
   --         v2 = { spill = 2 },
   --         num_spilled = 2 })
   alloc_3.v1 = 1 -- %rcx
   alloc_3.v2 = 2 -- %rdx
   test_3()

   alloc_3.v1 = 8 -- %r8
   alloc_3.v2 = 9 -- %r9
   test_3()
end
