module(..., package.seeall)

local ffi = require("ffi")
local bit = require("bit")
local C = ffi.C

local dasm = require("dasm")

local regalloc = require("pf.regalloc")

|.arch x64
|.actionlist actions

-- Table keeping machine code alive to the GC.
local anchor = {}

local debug = true

local function compile_cjmp(Dst, op, target)
  if op == "=" then
      | je   =>(target)
  elseif op == "!=" then
      | jne  =>(target)
  elseif op == ">=" then
      | jge  =>(target)
  elseif op == "<=" then
      | jle  =>(target)
  elseif op == ">" then
      | jg   =>(target)
  elseif op == "<" then
      | jl   =>(target)
  end
end

local function compile(instructions, alloc, dump)
   local Dst = dasm.new(actions)

   -- number of =>(...) style labels
   -- reserve three labels 0-2 for return cases
   local maxpc = 3

   -- allocate space for all spilled vars
   --local spilled_space = alloc.num_spilled * 32
   --if spilled_space > 0 then
   --   | sub rsp, spilled_space
   --end

   for _, instr = ipairs(instructions) do
      local itype = instr[1]

      if itype == "label" then
         -- offset for reserved labels
         local lnum = instr[2] + 3

         if lnum + 1 > maxpc then
            maxpc = lnum + 1
            Dst:growpc(maxpc)
         end

         |=>(lnum):

      elseif itype == "cjmp" then
         local target = instr[3]

         if (instr[3] == "true-label") then
            target = 0
         end

         compile_cjmp(Dst, insr[2], target)

      elseif itype == "cmp" then
        local lhs_reg = alloc[instr[2]]
        local rhs = instr[3]

        if type(rhs) == "number" then
           | cmp Rq(lhs_reg), rhs
        else
           local rhs_reg = alloc[rhs]
           | cmp Rq(lhs_reg), Rq(rhs_reg)
        end

      elseif itype == "load" then
         local target = alloc(instr[2])
         local offset = instr[3]
         local bytes  = instr[4]

         if bytes == 1 then
            | movzx Rq(target_reg), byte [rdi + offset]
         elseif bytes == 2 then
            | movzx Rq(target_reg), word [rdi + offset]
         else
            | mov   Rd(target_reg), dword [rdi + offset]
         end

      elseif op == "add" then
         local r1, r2 = alloc[instr[2]], alloc[instr[3]]
         | add Rq(r1), Rq(r2)

      elseif op == "mul" then
         local r1, r2 = alloc[instr[2]], alloc[instr[3]]
         | imul Rq(r1), Rq(r2)

      elseif op == "add-i" then
         local reg = alloc[instr[2]]
         | add Rq(reg), expr[3]

      elseif op == "mul-i" then
         local r = alloc[expr[2]]
         local const = expr[3]

         if const == 2 then
            | lea Rq(r), [Rq(r)*2]
         elseif const == 4 then
            | lea Rq(r), [Rq(r)*4]
         elseif const == 8 then
            | lea Rq(r), [Rq(r)*8]
         elseif const == 3 then
            | lea Rq(r), [Rq(r)+Rq(r)*2]
         elseif const == 5 then
            | lea Rq(r), [Rq(r)+Rq(r)*4]
         elseif const == 7 then
            | lea Rq(r), [Rq(r)+Rq(r)*8]
         else
            | imul Rq(r), const
         end

      elseif itype == "+3" then
         local r1 = alloc[instr[2]]

         -- expr2 is always a register
         -- due to constant folding, only at most one of expr3
         -- or expr4 can be a constant
         if type(instr[3]) == "number" then
            local r2 = alloc[instr[4]]
            | lea Rq(r1), [Rq(r2)+instr[3]]
         elseif type(instr[4]) == "number" then
            local r2 = alloc[instr[3]]
            | lea Rq(r1), [Rq(r2)+instr[4]]
         else
            local r2, r3 = alloc[instr[3]], alloc[instr[4]]
            | lea Rq(r1), [Rq(r2)+Rq(r3)]
         end
      end

      else
	 error(string.format("NYI instruction %s", itype))
      end
   end

   -- return true, false
   -- TODO: do this more cleverly
   |=>(0):
   | mov rax, 0x1
   | jmp >3
   |=>(1):
   | mov rax, 0x0
   |=>(2):

   -- fix stack
   --if spilled_space > 0 then
   --   | add rsp, spilled_space
   --end
   | ret

   local mcode, size = Dst:build()
   table.insert(anchor, mcode)

   if dump or debug then
      print("mcode dump:")
      dasm.dump(mcode, size)
   end

   return ffi.cast(ffi.typeof("bool(*)(unsigned char*, uint16_t)"),
                   mcode)
end

function load(ssa, dump)
   local alloc = regalloc.allocate_registers(ssa)
   local fun = compile(ssa, alloc, dump)

   return fun
end

function selftest()
   local sel = require("pf.selection")
   local ra = require("pf.regalloc")

   -- `ip`
   local example_1 =
      { start = "L1",
	order = { "L1", "L4", "L5" },
	blocks =
	   { L1 = { label = "L1",
		    bindings = {},
		    control = { "if", { ">=", "len", 14 }, "L4", "L5" } },
	     L4 = { label = "L4",
		    bindings = {},
		    control = { "return", { "=", { "[]", 12, 2 }, 8 } } },
	     L5 = { label = "L5",
		    bindings = {},
		    control = { "return", { "false" } } } } }

   -- `arp`
   local example_2 =
      { start = "L1",
	order = { "L1", "L4", "L5" },
	blocks =
	   { L1 = { label = "L1",
		    bindings = {},
		    control = { "if", { ">=", "len", 14 }, "L4", "L5" } },
	     L4 = { label = "L4",
		    bindings = {},
		    control = { "return", { "=", { "[]", 12, 2 }, 1544 } } },
	     L5 = { label = "L5",
		    bindings = {},
		    control = { "return", { "false" } } } } }

   -- `tcp`
   local example_3 =
      { start = "L1",
	order = { "L1", "L4", "L6", "L7", "L8", "L10", "L12", "L13",
		  "L14", "L16", "L17", "L15", "L11", "L9", "L5" },
	blocks =
	   { L1 = { label = "L1",
	            bindings = {},
	            control = { "if", { ">=", "len", 34 }, "L4", "L5" } },
	     L4 = { label = "L4",
	            bindings = { { name = "v1", value = { "[]", 12, 2 } } },
	            control = { "if", { "=", "v1", 8 }, "L6", "L7" } },
	     L6 = { label = "L6",
	            bindings = {},
	            control = { "return", { "=", { "[]", 23, 1 }, 6 } } },
	     L7 = { label = "L7",
	            bindings = {},
	            control = { "if", { ">=", "len", 54 }, "L8", "L9" } },
	     L8 = { label = "L8",
	            bindings = {},
	            control = { "if", { "=", "v1", 56710 }, "L10", "L11" } },
	     L10 = { label = "L10",
	             bindings = { { name = "v2", value = { "[]", 20, 1 } } },
	             control = { "if", { "=", "v2", 6 }, "L12", "L13" } },
	     L12 = { label = "L12",
	             bindings = {},
	             control = { "return", { "true" } } },
	     L13 = { label = "L13",
	             bindings = {},
	             control = { "if", { ">=", "len", 55 }, "L14", "L15" } },
	     L14 = { label = "L14",
	             bindings = {},
	             control = { "if", { "=", "v2", 44 }, "L16", "L17" } },
	     L16 = { label = "L16",
	             bindings = {},
	             control = { "return", { "=", { "[]", 54, 1 }, 6 } } },
	     L17 = { label = "L17",
	             bindings = {},
	             control = { "return", { "false" } } },
	     L15 = { label = "L15",
	             bindings = {},
	             control = { "return", { "false" } } },
	     L11 = { label = "L11",
	             bindings = {},
	             control = { "return", { "false" } } },
	     L9 = { label = "L9",
	            bindings = {},
	            control = { "return", { "false" } } },
	     L5 = { label = "L5",
	            bindings = {},
	            control = { "return", { "false" } } } } }

   -- `ip[1] + ip[2] + ip[3] == 1`
   example_4 =
      { start = "L1",
        order = { "L1", "L4", "L6", "L7", "L5" },
        blocks =
           { L1 = { label = "L1",
                    bindings = {},
                    control = { "if", { ">=", "len", 34 }, "L4", "L5" } },
             L4 = { label = "L4",
                    bindings = {},
                    control = { "if", { "=", { "[]", 12, 2 }, 8 }, "L6", "L7" } },
             L6 = { label = "L6",
                    bindings = {},
		    control = { "return",
                                { "=", { "+", { "+", { "[]", 15, 1 }, { "[]", 16, 1 } },
                                         { "[]", 17, 1 } }, 1 } } },
             L7 = { label = "L7",
                    bindings = {},
                    control = { "return", { "false" } } },
             L5 = { label = "L5",
                    bindings = {},
                    control = { "return", { "false" } } } } }

   local function test(ssa, pkt, regalloc)
      -- Compile and then call native function on the given packet
      local instr = sel.select(ssa)
      local f = compile(instr, regalloc)
      return f(pkt.packet, pkt.len)
   end

   -- set up the metatables properly on sub-tables of example
   -- register allocation outputs used in tests
   local function fix_ra(ssa, ra)
      for _, val in pairs(ra) do
         if type(val) == "table" and not val.spill then
            setmetatable(val, {__index = ra})
         end
      end

      for label, block in pairs(ssa.blocks) do
         if not ra[label] then
            local tbl = {}
            ra[label] = tbl
            setmetatable(tbl, {__index = ra})
         end
      end
   end

   local savefile = require("pf.savefile")
   arp_pkts = savefile.load_packets("../tests/data/arp.pcap")
   v4_pkts = savefile.load_packets("../tests/data/v4.pcap")
   v6_pkts = savefile.load_packets("../tests/data/v6.pcap")

   local rax, rcx, rdx, rsi, rdi = 0, 1, 2, 6, 7
   local alloc_1 = { num_spilled = 0,
                     len = rsi,
                     P = rdi,
                     L4 = { r1 = rax } }
   fix_ra(example_1, alloc_1)

   -- not an arp packet
   assert(not test(example_1, arp_pkts[1], alloc_1))
   assert(not test(example_1, arp_pkts[2], alloc_1))
   -- TODO: this is currently broken
   --assert(not test(example_1, arp_pkts[2], ra.allocate_registers(example_1)))
   -- yay arp
   assert(test(example_2, arp_pkts[1], alloc_1))
   assert(test(example_2, arp_pkts[2], alloc_1))

   local alloc_3 = { num_spilled = 0,
                     len = rsi,
                     P = rdi,
                     L6 = { r1 = rax },
                     L16 = { r1 = rax } }
   fix_ra(example_3, alloc_3)

   local function test_3()
      assert(not test(example_3,
                      arp_pkts[1],
                      alloc_3))
      assert(test(example_3,
                  -- this one is a TCP packet
                  v4_pkts[1],
                  alloc_3))
      assert(test(example_3,
                  -- this one is also a TCP packet
                  v6_pkts[16],
                  alloc_3))
   end

   -- TODO: spills are currently broken
   --test_3({ v1 = { spill = 1 },
   --         v2 = { spill = 2 },
   --         num_spilled = 2 })
   alloc_3.v1 = rcx -- %rcx
   alloc_3.v2 = rdx -- %rdx
   test_3()

   alloc_3.v1 = 8 -- %r8
   alloc_3.v2 = 9 -- %r9
   test_3()

   local alloc_4 = { num_spilled = 0,
                     len = rsi,
                     P = rdi,
		     L4 = { r1 = rax },
                     L6 = { r1 = rax,
                            r2 = rcx,
                            r3 = rdx,
                            r4 = rax } }
   fix_ra(example_4, alloc_4)
   test(example_4, arp_pkts[1], alloc_4)
end
